name: Build and Deploy to EC2

on:
  push:
    branches: [ deploy ]

env:
  EC2_KEY_PAIR_NAME: myKeyPair
  STACK_NAME: my-app-stack
  DOCKER_IMAGE: my-app
  DOCKER_TAG: latest
  EC2_SSH_USER: ubuntu

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file ./social_media_app/cloudformation.yml \
            --parameter-overrides KeyPairName=${{ env.EC2_KEY_PAIR_NAME }} \
            --capabilities CAPABILITY_IAM

  build-and-deploy:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          EC2_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIP`].OutputValue' \
            --output text)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "value=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_PUBLIC_IP" >> ~/.ssh/known_hosts
          cat << EOF >> ~/.ssh/config
          Host ec2
            HostName $EC2_PUBLIC_IP
            User ${{ env.EC2_SSH_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          EOF

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:$DOCKER_TAG ./social_media_app
          docker save $DOCKER_IMAGE:$DOCKER_TAG > image.tar

      - name: Copy Docker image to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa image.tar ${{ env.EC2_SSH_USER }}@$EC2_PUBLIC_IP:/home/${{ env.EC2_SSH_USER }}/

      - name: Deploy Docker image on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_SSH_USER }}@$EC2_PUBLIC_IP << EOF
          IMAGE_NAME="${DOCKER_IMAGE}"
          IMAGE_TAG="${DOCKER_TAG}"

          docker load -i /home/${{ env.EC2_SSH_USER }}/image.tar

          docker stop \$IMAGE_NAME || true
          docker rm \$IMAGE_NAME || true

          docker run -d \
            --name \$IMAGE_NAME \
            -p 80:80 \
            --restart unless-stopped \
            \$IMAGE_NAME:\$IMAGE_TAG

          docker ps -a
          EOF
