name: Build and Deploy to EC2

on:
  push:
    branches: [ deploy ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  EC2_KEY_PAIR_NAME: myKeyPair
  STACK_NAME: my-app-stack
  DOCKER_IMAGE: my-app
  DOCKER_TAG: latest

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        id: deploy
        run: |
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file ./social_media_app/cloudformation.yml \
            --parameter-overrides KeyPairName=${{ env.EC2_KEY_PAIR_NAME }} \
            --capabilities CAPABILITY_IAM

  build-and-deploy:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          EC2_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIP`].OutputValue' \
            --output text)
          echo "EC2_PUBLIC_IP=${EC2_PUBLIC_IP}" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          cat << EOF >> ~/.ssh/config
          Host ${{ env.EC2_PUBLIC_IP }}
            User ec2-user
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking yes
          EOF

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ./social_media_app
          docker save ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} > image.tar

      - name: Copy Docker image to EC2
        run: scp -i ~/.ssh/id_rsa image.tar ec2-user@${{ env.EC2_PUBLIC_IP }}:/home/ec2-user/

      - name: Deploy Docker image on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          sudo yum update -y
          sudo amazon-linux-extras install docker -y
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          
          docker load -i /home/ec2-user/image.tar
          
          docker stop ${{ env.DOCKER_IMAGE }} || true
          docker rm ${{ env.DOCKER_IMAGE }} || true
          
          docker run -d \
            --name ${{ env.DOCKER_IMAGE }} \
            -p 80:3000 \
            --restart unless-stopped \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          EOF